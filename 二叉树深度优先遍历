
import java.util.*;

public class Traversal1 {
    private static class TreeNode{
        char val;
        TreeNode left;
        TreeNode right;
        TreeNode(char val){
            this.val=val;
        }
       public String toString(){
            return String.format("%d",val);
       }
    }
    //建立二叉树
    public static TreeNode buildTree(){
        TreeNode a=new TreeNode('A');
        TreeNode b=new TreeNode('B');
        TreeNode c=new TreeNode('C');
        TreeNode d=new TreeNode('D');
        TreeNode e=new TreeNode('E');
        TreeNode f=new TreeNode('F');
        a.left=b;a.right=c;
        b.left=d;c.left=e;c.right=f;
        return a;
    }
    //深度优先遍历
    //递归遍历
    //前序
    public static List<Character> preOrderTraversal(TreeNode root){
        List<Character> list=new ArrayList<>();

        if(root==null){
            return list;
        }

        list.add(root.val);
        list.addAll(preOrderTraversal(root.left));
        list.addAll(preOrderTraversal(root.right));
        return list;
    }
//中序
    public static List<Character> inOrderTraversal(TreeNode root){
        List<Character> list=new ArrayList<>();

        if(root==null){
            return list;
        }
        list.addAll(inOrderTraversal(root.left));
        list.add(root.val);
        list.addAll(inOrderTraversal(root.right));
        return list;
    }
    //后序
    public static List<Character> postOrderTraversal(TreeNode root){
        List<Character> list=new ArrayList<>();

        if(root==null){
            return list;
        }


        list.addAll( postOrderTraversal(root.left));
        list.addAll( postOrderTraversal(root.right));
        list.add(root.val);
        return list;
    }
    //基于“栈”的遍历
    //前序
    public static List<Character> preOrderTraversal1(TreeNode root){
        Stack<TreeNode> stack=new Stack<>();
        List<Character> list=new ArrayList<>();
        TreeNode cur=root;
        while(cur!=null||!stack.isEmpty()){
            while(cur!=null){
                list.add(cur.val);
                stack.push(cur);
                cur=cur.left;
            }
            TreeNode top=stack.pop();
            cur=top.right;
        }
        return list;

    }
    //中序

    public static List<Character> inOrderTraversal1(TreeNode root){
        Stack<TreeNode> stack=new Stack<>();
        List<Character> list=new ArrayList<>();
        TreeNode cur=root;
        while(cur!=null||!stack.isEmpty()){
            while(cur!=null){
                stack.push(cur);
                cur=cur.left;
            }
            TreeNode top=stack.pop();
            list.add(top.val);
            cur=top.right;

        }

        return list;
    }
    //后序
    public static List<Character> postOrderTraversal1(TreeNode root){
        Stack<TreeNode> stack=new Stack<>();
        List<Character> list=new ArrayList<>();
        stack.push(root);
        TreeNode top=null;

        while(!stack.isEmpty()){
            TreeNode cur = stack.peek();
            if((cur.left == null && cur.right == null) ||
                    (top != null && (top == cur.left ||top == cur.right))){

                list.add(cur.val);
                top = cur;
                stack.pop();
            }else{
                if(cur.right != null) stack.push(cur.right);
                if(cur.left != null) stack.push(cur.left);
            }
        }
        return list;
    }
 


    public static void main(String args[]){
        TreeNode root=buildTree();
        System.out.println(preOrderTraversal(root));
        System.out.println(preOrderTraversal1(root));
        System.out.println("=======================================");
        System.out.println(inOrderTraversal(root));
        System.out.println(inOrderTraversal1(root));
        System.out.println("=======================================");
        System.out.println(postOrderTraversal(root));
        System.out.println(postOrderTraversal1(root));


    }
}

                 
