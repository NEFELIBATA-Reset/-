/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(postorder.length==0){
            return null;
        }
        int rootValue=postorder[postorder.length-1];
        int leftCount;
        for(leftCount=0;leftCount<inorder.length;leftCount++){
            if(inorder[leftCount]==rootValue){
                break;
            }
        }
        TreeNode root=new TreeNode(rootValue);
        int[] leftPostorder=Arrays.copyOfRange(postorder,0,leftCount);
        int[] leftInorder=Arrays.copyOfRange(inorder,0,leftCount);
        root.left=buildTree(leftInorder,leftPostorder);
        int[] rightPostorder=Arrays.copyOfRange(postorder,leftCount,postorder.length-1);
        int[] rightInorder=Arrays.copyOfRange(inorder,leftCount+1,postorder.length);
        root.right=buildTree(rightInorder,rightPostorder);
        return root;
    }
}
