/*
给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。
要求返回这个链表的深拷贝。
 */

import java.util.Comparator;
import java.util.Map;
import java.util.TreeMap;

public class CopyRandomList {
    private static class Node {
        private int val;
        private Node next;
        private Node random;

        private Node() {}

        private Node(int val, Node next, Node random) {
            this.val = val;
            this.next = next;
            this.random = random;
        }
    }
    //方法一：简单拷贝
    public static Node copyRandomList(Node head) {
        //简单拷贝一份链表
        Node cur = head;
        while (cur != null) {
            Node node = new Node();
            node.val = cur.val;
            node.next = cur.next;
            cur.next = node;
            cur = node.next;
        }
        //指定随机指针
        cur = head;
        while (cur != null) {
            Node node = cur.next;
            if (cur.random != null) {
                node.random = cur.random.next;
            } else {
                node.random = null;
            }
            cur = node.next;
        }

        //将拷贝好的链表分离出来
        cur = head;
        if (head == null) {
            return null;
        }
        Node newHead = head.next;
        while (cur != null) {
            Node node = cur.next;
            cur.next = node.next;
            if (node.next != null) {
                node.next = node.next.next;
            }
            cur = cur.next;
        }
        return newHead;
    }

    //方法二：
    /*
    java.util.Comparator是比较器接口，如果我们需要控制某个类的次序并且该类本身不支持排序，那么就可以建立一个类比较器来进行排序，实现方式很简单只需要实现java.util.Comparator接口。

    java.util.Comparator接口只包括两个函数，

    1) 若一个类要实现java.util.Comparator接口：它一定要实现int compare(T o1, T o2) 函数，而另一个可以不实现boolean equals(Object obj) 函数

    2）int compare(T o1, T o2) 是比较o1和o2的大小

    如果返回值为负数意味着o1比o2小，否则返回为零意味着o1等于o2，返回为正数意味着o1大于o2
    */
    private static class NodeComparator implements Comparator<Node> {
        @Override
        public int compare(Node o1, Node o2) {
            return o1.val - o2.val;
        }
    }
    public static Node copyRandomList2(Node head) {
        Map<Node, Node> map = new TreeMap<>(new NodeComparator());
        Node newHead = null;
        Node newLast = null;
        Node cur = head;
        while (cur != null) {
            Node node = new Node();
            node.val = cur.val;
            if (newHead == null) {
                newHead = node;
            } else {
                newLast.next = node;
            }
            newLast = node;
            map.put(cur, node);
            cur = cur.next;
        }
        cur = head;
        Node node = newHead;
        while (node != null) {
            if (cur.random != null) {
                node.random = map.get(cur.random);
            } else {
                node.random = null;
            }
            cur = cur.next;
            node = node.next;
        }
        return newHead;
    }
}
